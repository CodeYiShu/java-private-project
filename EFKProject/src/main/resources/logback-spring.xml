<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration>
    <!--
        1、非ERROR日志，输出到tag为general中，索引是efk-general-logs-*
        2、ERROR日志，输出到tag为error中，索引是efk-error-logs-*
    -->

    <!--引用默认日志配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!--使用默认的控制台日志输出实现-->
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <!--应用名称-->
    <springProperty name="APP_NAME" scope="context" source="spring.application.name" defaultValue="springBoot"/>
    <!--FLUENTD地址-->
    <springProperty name="FLUENTD_HOST" scope="context" source="fluentd.host" defaultValue="localhost"/>

    <!--非ERROR日志输出到FLUENTD-->
    <appender name="FLUENTD_GENERAL" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <!--过滤掉ERROR级别的日志，输出DEBUG、INFO、WARN级别的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <destination>${FLUENTD_HOST}:24221</destination>
        <!--调用栈信息，便于展示%file、%method和%line，效率不高-->
        <includeCallerData>true</includeCallerData>
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp>
                    <timeZone>Asia/Shanghai</timeZone>
                </timestamp>
                <!--自定义日志输出格式-->
                <pattern>
                    <pattern>
                        {
                        "project": "JavaUtilsProject",
                        "service": "${APP_NAME:-}",
                        "level": "%level",
                        "date": "%date{yyyy-MM-dd HH:mm:ss.SSS}",
                        "pid": "${PID:-}",
                        "thread": "%thread",
                        "logger": "%logger",
                        "class": "%file",
                        "method": "%method:%line",
                        "message": "%message",
                        "client_id": "%X{client.ip}",
                        "client_request_uri": "%X{client.requestUri}",
                        "client_request_method": "%X{client.requestMethod}",
                        "client_request_params": "%X{client.requestParams}",
                        "stack_trace": "%exception{20}"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
        <!--当有多个FLUENTD服务时，设置访问策略为轮询-->
        <connectionStrategy>
            <roundRobin>
                <connectionTTL>5 minutes</connectionTTL>
            </roundRobin>
        </connectionStrategy>
    </appender>

    <!--ERROR日志输出到FLUENTD-->
    <appender name="FLUENTD_ERROR" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <!--单独输出ERROR日志级别-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <destination>${FLUENTD_HOST}:24222</destination>
        <!--调用栈信息，便于展示%file、%method和%line，效率不高-->
        <includeCallerData>true</includeCallerData>
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp>
                    <timeZone>Asia/Shanghai</timeZone>
                </timestamp>
                <!--自定义日志输出格式-->
                <pattern>
                    <pattern>
                        {
                        "project": "JavaUtilsProject",
                        "service": "${APP_NAME:-}",
                        "level": "%level",
                        "date": "%date{yyyy-MM-dd HH:mm:ss.SSS}",
                        "pid": "${PID:-}",
                        "thread": "%thread",
                        "logger": "%logger",
                        "class": "%file",
                        "method": "%method:%line",
                        "message": "%message",
                        "client_id": "%X{client.ip}",
                        "client_request_uri": "%X{client.requestUri}",
                        "client_request_method": "%X{client.requestMethod}",
                        "client_request_params": "%X{client.requestParams}",
                        "stack_trace": "%exception{20}"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
        <!--当有多个FLUENTD服务时，设置访问策略为轮询-->
        <connectionStrategy>
            <roundRobin>
                <connectionTTL>5 minutes</connectionTTL>
            </roundRobin>
        </connectionStrategy>
    </appender>

    <!--控制框架输出日志：框架内部的日志，DEBUG级别的日志对我们并没有啥用处，都可以设置为INFO以上级别-->
    <logger name="org.slf4j" level="INFO"/>
    <logger name="springfox" level="INFO"/>
    <logger name="io.swagger" level="INFO"/>
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.hibernate.validator" level="INFO"/>

    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FLUENTD_GENERAL"/>
        <appender-ref ref="FLUENTD_ERROR"/>
    </root>
</configuration>
